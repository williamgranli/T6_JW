Interview Notes:

	
	Changes to example code:
	Realised that many partners used the code a lot. Existing examples varied a lot. They weren't good enough and they wanted better examples. Feedback from partners and specific examples were requested. Tried to make them smaller and using other interfaces/modules. Would have updated it anyway.

	How the new system was designed
	Change how they were used, event driven and using Glib. They couldn't do that and use the old ones, they wouldn't work well together. Thought about it from the perspective of "If I am going to write it, how would I do it?".
	Useful internally too. System architects and those who work closely with the partners. They didn't ask the partners, it was an internal decision.

	**Reason for changes**
	Improved experience. Some groups had started writing acaps in axis. They had lots of feedback about the interfaces and ease of use. Mostly internally.

	Error Handling
	Glib error handling - How they cope with error messages. More information from errors, with useful information. Would have happened even if Glib was not utilised. More of a conformance with using Glib than anything else.

	Axaudio - Added to enable audio analysis. They did have some partners that wanted to analyse audio. There was no standard way to get audio from their products. There was no easy way to do it, despite the fact that some partners had managed to do it.

	Legal issues with hardware meant that things need to be turned on/off. Audio was not new, just a standardisation of how to use audio.

	Nothing had really changed in the API for a long time.

	1.0-1.4 was to build the api for different architectures. Enabling building on new applications and new cameras using new architectures. 

	Partner request - Mechanical / Digital ptz. Came from product management. 

	***Most of the added features are from partners***
	Partners: Developers of the applications. It's the developers who make the applications for those partners. They have an idea of what the customer wants for their application. Integrated into a VMS (Video Management System). **Development partners** 

	axstorage - partners that wanted to store data on an SD card etc. Added to allow this functionality. Previous alternative was a smaller area to store. Probably stored files in the normal file system before. Factory default reset might cause it to lose and data.

	axserialport - to integrate other things other than just video to work together. Mapping things to the camera et.c. Most likely came from partners // product management. 

	old ones were hard to use with the existing ones. Multi-threading was difficult. Couldn't use the old ones that still needed to work.

	**Maintaining both APIs for some time**

	Burst Mode Removal - Lots of changes in the camera meant that they would have to re-implement the whole thing. Cost analysis to determine if it would be used any more. They didn't think it was a good API either. It would be up to each application to decide and manage it themselves. No negative feedback (Yet).

	***The API would be improved if they had more input from users. It's always hard to change an API. You can always learn to be better at writing APIs. It's a process. Mostly based from using APIs. 


	----------- Lehmans Laws -----------------------
	1) Their partners are good at solving problems. When they have had a lack of an API or feature, they solve it anyway but in a way that they do not think is a good solution. There are no restrictions on what the camera can do, if they can figure it out. They can become reliant upon these changes so when Axis then make a change (web server example) it breaks their work. Catch what they want to do and make it possible and works with the API. Provide good solutions for things. Picked up things that they do and corrected it.

	2) She feels it's more important to add more features and that they work well. Function over form. It's often easier to make a good API if you're trying to follow a good guideline of how to make good APIs. 

	4) Big bumps of API evolution. 1.4 was created and then a major update to 2.0.

	5) She did not communicate directly with the partners. The SDK is mainly what has been communicated with the new example code etc. 

	6) They want more applications and broader types of applications. They want to enable them to do that in a good way. If they didn't do that they'd have less applications. They might have communicated and been involved but she's not sure. "Validated through use".

	7) No metrics that she knows of, she'd have to ask the ADP engineers for some specifics and if there are any issues. She would like more input and feedback from when the product has worked correctly.

	8) Again, little to no metrics.

Camera is queried about what it supports et.c. - We need to be better at making APIs. She would like them to be better if possible. They did a sort of testing process where someone tried to write something using the API as it was.

Product management decide what to add, she is more involved with how.

Only able to start one application previously. Now it's different. They have allowed multiple applications that are not quite as expensive. Up to the user / integrator. Hardware improvements (CPU / Memory).

2.0 could have benefited from using Scrum and some CI?

Immediate post 2.0

Newer APIs are coming in the future.
There will not be a big bang like 2.0, incremental steps inline with the work done in 2.0

"she would have preferred incremental changes"

Only in the last few years has ecosystems become a thinking point. Probably thought of them before when they discussed who would be using the APIs.

**Observer for axevent - Based on callbacks.